buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

apply plugin: 'net.minecraftforge.gradle'

version = "3.0.0"
group = 'thedarkcolour.kotlinforforge'
archivesBaseName = 'kotlinforforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
kotlin.jvmToolchain {}

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

repositories {
    mavenCentral()
}

// Workaround to remove build\java from MOD_CLASSES because SJH doesn't like nonexistent dirs
for (def sourceSet : [sourceSets.main, sourceSets.test]) {
    def mutClassesDirs = sourceSet.output.classesDirs as ConfigurableFileCollection
    def javaClassDir = sourceSet.java.classesDirectory.get()
    def mutClassesFrom = new HashSet<>(mutClassesDirs.getFrom())
    mutClassesFrom.removeIf { return ((it as Provider)?.get() ?: it) == javaClassDir }
    mutClassesDirs.setFrom(mutClassesFrom)
}

configurations {
    library
    api.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18-38.0.12'

	library group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
	library group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
	library group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	library group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    library group: "org.jetbrains.kotlinx", name: "kotlinx-serialization-json", version: serialization_version
}

minecraft {
    mappings channel: 'official', version: '1.18'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,LOADING,CORE'
            property 'forge.logging.console.level', 'debug'

            mods {
                kotlinforforge {
                    source sourceSets.main
                }
                kotlinforforgetest {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'scan,loading,core'

            mods {
                kotlinforforge {
                    source sourceSets.main
                }
                kotlinforforgetest {
                    source sourceSets.test
                }
            }
        }
    }
}

shadowJar {
    archiveClassifier.set("obf")

    dependencies {
        include dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
        include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:${serialization_version}")
        include dependency("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:${serialization_version}")
    }
}

jar {
    manifest {
        attributes([
                "FMLModType": "LANGPROVIDER",
                "Specification-Title": "Kotlin for Forge",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"thedarkcolour",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.freeCompilerArgs = ['-Xexplicit-api=warning', '-Xjvm-default=all']
}
